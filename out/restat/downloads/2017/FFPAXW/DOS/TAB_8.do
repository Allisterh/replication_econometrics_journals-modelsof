********************************************************************************
* Gabriel M Ahlfeldt & Daniel P. McMillen
* Tall buildings and land values in the Review of Economics and Statistics
* (C) 2017
* Stata 15.0; Windows Server 2008 R2
********************************************************************************
* THIS DO FILE GENERATES STANDARD ERRORS BY MEANS OF BOOTSTRAPPING

* DEFINE NUMBER OF ITERATIONS
	local IT = 10000
* DEFINE SIZE OF BOOTSTRAP SAMPLES (IN % OF ORIGINAL)
	local BS = 1

* START LOG SESSION
	log using "LOGS/TAB_8", replace	
	
* HEIGHT ELASTICITY ************************************************************
	
	* OPEN LOOP OVER BOOTSTRAP ITERATIONS 
		forval it = 1/`IT' {
		* LOAD TEMPORARY DATA SET FOR HEIGHT ELASTICITY ESTIMATION GENERATED BY TAB_5.do 
			u DATA\TEMP\temp_HBOOT.dta, clear
		* GENERATE BOOTSTRAP SAMPLE	
			qui bsample round(`BS'*_N)
		* OLS HEIGHT ELASTICITY ESTIMATION; SAVES ESTIMATES
			qui areg lHEIGHT lLV_COM lLV_RES lLV_OTHER lLV_Y_COM lLV_Y_RES lLV_Y_OTHER RES_CCD* COM_CCD*     RETAIL HOTEL  WAREHOUSE PUBLIC  CULTURE SPORTS Church, cluster(CC)	abs(CC)		
			qui scalar BOOT_BETA_COM_`it' = _b[lLV_COM]
			qui scalar BOOT_BETA_RES_`it' = _b[lLV_RES]
		* IV HEIGHT ELASTICITY ESTIMATION; SAVES ESTIMATES
		qui ivreg2 lHEIGHT (lLV_COM lLV_RES lLV_OTHER lLV_Y_COM lLV_Y_RES lLV_Y_OTHER = IV* )  COM_CCD* RES_CCD*   RETAIL HOTEL  WAREHOUSE PUBLIC  CULTURE SPORTS Church CCD*,  partial(CCD* COM_CCD* RES_CCD*  RETAIL HOTEL  WAREHOUSE PUBLIC  CULTURE SPORTS Church)
			qui scalar BOOT_BETA_IV_COM_`it' = _b[lLV_COM]
			qui scalar BOOT_BETA_IV_RES_`it' = _b[lLV_RES]		
		* DISPLAY ITERATION OF HEIGHT ELASTICITY BOOTSTRAPPING 
			nois _dots `it' 0	
		* CLOSE BOOTSTRAPPING LOOP
		} 	

* CONSTRUCTION COST ELASTICITY *************************************************
	
	* LOAD DATA CONSTRUCTED IN TAB_7 DO FILE INCLUDING PSM WEIGHTS
		u "DATA/TEMP/temp_CONSTR_WORLD_WEIGHTS.dta", clear
		
	* CREATE PROGRAM THAT GENERATES LOG FLOOR SPACE COST ***********************
		program drop _all
		program COST
			* REGRESS LOG OF USABLE FLOOR SPACE - LOG OF GROSS FLOOR SPACE (converson) AGAINST LOG OF HEIGHT
				reg conversion lHEIGHT, robust
			* GENERATE PREDICTED CONVERSION RATE AS A FUNCTION OF HEIGHT
				predict temp
			* IMPUTE LOG USABLE FLOOR SPACE BASED ON CONVERSION RATE AND LOG GROSS FLOOR AREA
				gen lUFA = lgfa+temp
			* DROP TEMPORARY VARIABLE	
				drop temp
			* GENERATE LOG OF FLOOR SPACE COST PER USABLE FLOOR AREA	
				gen lAVCOST = log(constr_cost)-lUFA
				label var lAVCOST "Log floor space cost"
			* END PROGRAM
				end
				
		
		* US SAMPLE, TALL RESIDENTIAL
					
			* OPEN LOOP OVER BOOTSTRAP ITERATIONS AND PRESERVE DATA
				forval it = 1/`IT' {				
					preserve 
					* RESTRICT DATA TO TALL RESIDENTIAL SAMPLE
						qui	keep if FLOORS >= 5 & USE_RESIDENTIAL == 1 
					* GENERATE BOOTSTRAP SAMPLE
						qui bsample round(`BS'*_N)
					* RUN PROGRAM TO CREATE LOG FLOOR SPACE COST WITHIN SAMPLE
						qui COST 
					* ESTIMATE CONSTRUCTION COST ELASTICITY AND SAVE ESTIMATE		
						qui areg lAVCOST lHEIGHT  i.CC if country == "U.S.A." [w=NWCH]  , abs(country) robust
						qui scalar BOOT_THETA_RES_`it' = _b[lHEIGHT]
					* RESTORE FULL DATA SET
						restore 
					* DISPLAY ITERATION OF RESIDENTIAL CONSTRUCTION COST ELASTICITY BOOTSTRAPPING 
						nois _dots `it' 0	
					* CLOSE BOOTSTRAPPING LOOP
						}
				
		* US SAMPLE, TALL COMMERCIAL
		
			* OPEN LOOP OVER BOOTSTRAP ITERATIONS AND PRESERVE DATA
				forval it = 1/`IT' {				
					preserve 
					* RESTRICT DATA TO TALL COMMERCIAL SAMPLE
						qui	keep if FLOORS >= 5 & USE_COMMERCIAL == 1 
					* GENERATE BOOTSTRAP SAMPLE
						qui bsample round(`BS'*_N)
					* RUN PROGRAM TO CREATE LOG FLOOR SPACE COST WITHIN SAMPLE
						qui COST 
					* ESTIMATE CONSTRUCTION COST ELASTICITY AND SAVE ESTIMATE		
						qui areg lAVCOST lHEIGHT  i.CC if country == "U.S.A." [w=NWCH] , abs(country) robust
						* 20-FLOOR COMMERCIAL BUILDING
							qui scalar BOOT_THETA_COM20_`it' = _b[lHEIGHT]
						* 30-FLOOR COMMERCIAL BUILDING
							qui scalar BOOT_THETA_COM30_`it' = (_b[lHEIGHT]/20.6	)*30
					* RESTORE FULL DATA SET
						restore 
					* DISPLAY ITERATION OF COMMERCIAL CONSTRUCTION COST ELASTICITY BOOTSTRAPPING 
						nois _dots `it' 0	
					* CLOSE BOOTSTRAPPING LOOP
						}

* EXTRA SPACE ELASTICITY *******************************************************

	* LOAD DATA
		u "DATA/CONSTR_EXTRASPACE.dta", clear

	* GEN LOG OF RATIO OF NET OVER GROSS FLOOR SPACE
		gen conversion = lufa-lgfa
	* CREATE PROGRAM THAT GENERATES LOG FLOOR AREA RATIO************************
		program drop _all
		program NET
			* REGRESS LOG OF USABLE FLOOR SPACE - LOG OF GROSS FLOOR SPACE (converson) AGAINST LOG OF HEIGHT
				qui reg conversion lHEIGHT, robust
			* GENERATE PREDICTED CONVERSION RATE AS A FUNCTION OF HEIGHT
				predict temp
			* IMPUTE LOG USABLE FLOOR SPACE BASED ON CONVERSION RATE AND LOG GROSS FLOOR AREA
				gen lUFA_net = lgfa +temp
				replace lUFA=lufa if lufa  != .
			* DROP TEMPORARY VARIABLE	
				drop temp
			* GENERATE LOG FLOOR AREA
				gen lFAR_net = lUFA - log(bldn_fp)
				label var lFAR "Log floor area ratio (log floor area - log parcel area)"
			* END PROGRAM
				end

		
	* RUN FAR REGRESSIONS FOR COMMERCIAL BUILDINGS
			
			* OPEN LOOP OVER BOOTSTRAP ITERATIONS AND PRESERVE DATA
				forval it = 1/`IT' {				
					preserve 
				* RESTRICT DATA TO COMMERCIAL BUILDINGS	
					qui keep if COM  == 1
				* GENERATE BOOTSTRAPPING SAMPLE
					qui bsample round(`BS'*_N)
				* RUN PROGRAM THAT GENERATES FAR
					qui NET
				* RUN FAR REGRESSION
					qui reg lFAR lHEIGHT, abs(CC) cluster(CC)
						* SAVE EXCESS SPACE ELASTICITY
						qui scalar  BOOT_LAMBDA_COM_`it' = 1-_b[lHEIGHT]
				* RESTORE DATA FOR FURTHER USE
					restore 
				* DISPLAY ITERATION OF COMMERCIAL EXCESS SPACE ELASTICITY BOOTSTRAPPING 
					nois _dots `it' 0	
				* CLOSE BOOTSTRAPPING LOOP
					}	
	
	* RUN FAR REGRESSIONS FOR RESIDENTIAL BUILDINGS
		
			* OPEN LOOP OVER BOOTSTRAP ITERATIONS AND PRESERVE DATA
				forval it = 1/`IT' {				
					preserve 
				* RESTRICT DATA TO RESIDENTIAL BUILDINGS	
					qui keep if RES  == 1
				* GENERATE BOOTSTRAPPING SAMPLE
					qui bsample round(`BS'*_N)
				* RUN PROGRAM THAT GENERATES FAR
					qui NET
				* RUN FAR REGRESSION
					qui reg lFAR lHEIGHT, abs(CC) cluster(CC)
						* SAVE EXCESS SPACE ELASTICITY
						qui scalar  BOOT_LAMBDA_RES_`it' = 1-_b[lHEIGHT]
				* RESTORE DATA FOR FURTHER USE
					restore 
				* DISPLAY ITERATION OF RESIDENTIAL EXCESS SPACE ELASTICITY BOOTSTRAPPING 
					nois _dots `it' 0	
				* CLOSE BOOTSTRAPPING LOOP
					}

					
* READ PARAMETERS **************************************************************
	clear
	set obs `IT'
	gen n_id = _n
	* LOOP OVER VARIABLES CONTAINING PARAMETER ESTIMATES
		qui foreach name in BETA_COM BETA_IV_COM BETA_RES BETA_IV_RES THETA_COM20 THETA_COM30 THETA_RES LAMBDA_COM LAMBDA_RES { 
		gen `name' = . 
		* LOOP OVER BOOTSTRAP ITERATIONS
			qui forval it = 1/`IT' {
			replace `name' = BOOT_`name'_`it' if _n == `it'
		* CLOSE BOOTSTRAP LOOP	
			}
		* SAVE MEAN AND SD ACROSS BOOTSTRAP ITERATIONS OF EACH PARAMETER	
			sum `name'
			scalar `name'_M = r(mean)
			scalar `name'_SD = r(sd)
		* CLOSE VARIABLE LOOP
		}	
	* GENEATE IMPLIED SIGMA FOR EVERY ITERATION 	
		gen SIGMA_OLS_COM_30 = 	BETA_COM*(1+THETA_COM30-LAMBDA_COM)
		gen SIGMA_IV_COM_30 = 	BETA_IV_COM*(1+THETA_COM30-LAMBDA_COM)
		gen SIGMA_OLS_COM_20 = 	BETA_COM*(1+THETA_COM20-LAMBDA_COM)
		gen SIGMA_IV_COM_20 = 	BETA_IV_COM*(1+THETA_COM20-LAMBDA_COM)
		gen SIGMA_OLS_RES = 	BETA_RES*(1+THETA_RES-LAMBDA_RES)
		gen SIGMA_IV_RES = 	BETA_IV_RES*(1+THETA_RES-LAMBDA_RES)
	
* GENERATE BOOTSTRAP STANDARD ERROR TABLE **************************************	
	
	* COMPUTE MEAN AND S.D. ACROSS IMPLIED SIGMA ESTIMATES
		gen one = 1
		preserve 
		collapse (sd) SIGMA_OLS_COM_30-SIGMA_IV_RES, by(one)
		gen  Parameter = "Sigma s.d."
		gen Row = 8
		save DATA/TEMP/temp.dta, replace
		restore 
		collapse (mean) SIGMA_OLS_COM_30-SIGMA_IV_RES, by(one)
		gen  Parameter = "Sigma mean"
		gen Row = 7
		append using DATA/TEMP/temp.dta
		erase DATA/TEMP/temp.dta
	
	* PREPARE DATA SET CORRESPONDING TO TABLE 8 FORMAT
		set obs 8
		replace Row = _n -2 if Row == .
		order Row Parameter 
		sort Row
		drop one
		ren SIGMA_OLS_COM_30 Commercial_30_OLS
		ren SIGMA_IV_COM_30 Commercial_30_IV
		ren SIGMA_OLS_COM_20 Commercial_20_OLS
		ren SIGMA_IV_COM_20 Commercial_20_IV	
		ren SIGMA_OLS_RES Residential_OLS
		ren SIGMA_IV_RES Residential_IV
	
	* WRITE MEAN AND S.D. OF HEIGHT ELASTICITY ESTIMATES INTO TABLE
		
		* COMMERCIAL OLS
		foreach var of varlist Commercial_30_OLS  Commercial_20_OLS {
			replace `var' = BETA_COM_M if Row == 1
			replace `var' = BETA_COM_SD if Row == 2
			}
		* COMMERCIAL IV
		foreach var of varlist Commercial_30_IV  Commercial_20_IV {
			replace `var' = BETA_IV_COM_M if Row == 1
			replace `var' = BETA_IV_COM_SD if Row == 2
			}
		* RESIDENTIAL OLS	
		foreach var of varlist Residential_OLS   {
			replace `var' = BETA_RES_M if Row == 1
			replace `var' = BETA_RES_SD if Row == 2
			}
		* RESIDENTIAL IV	
		foreach var of varlist Residential_IV   {
			replace `var' = BETA_IV_RES_M if Row == 1
			replace `var' = BETA_IV_RES_SD if Row == 2
			}
		* WRITE PARAMETER NAME	
			replace  Parameter = "Beta mean" if Row == 1	
			replace  Parameter = "Beta s.d." if Row == 2	

	* WRITE MEAN AND S.D. OF CONSTRUCTION COST ELASTICITY ESTIMATES INTO TABLE
		
		* 30-FLOOR COMMERCIAL
		foreach var of varlist Commercial_30_OLS  Commercial_30_IV {
			replace `var' = THETA_COM30_M if Row == 3
			replace `var' = THETA_COM30_SD if Row == 4
			}
		* 20-FLOOR COMMERCIAL	
		foreach var of varlist Commercial_20_OLS  Commercial_20_IV {
			replace `var' = THETA_COM20_M if Row == 3
			replace `var' = THETA_COM20_SD if Row == 4
			}
		* RESIDENTIAL	
		foreach var of varlist Residential_OLS  Residential_IV {
			replace `var' = THETA_RES_M if Row == 3
			replace `var' = THETA_RES_SD if Row == 4
			}
		* WRITE PARAMETER NAME	
			replace  Parameter = "Theta mean" if Row == 3	
			replace  Parameter = "Theta s.d." if Row == 4

	* WRITE MEAN AND S.D. OF EXCESS SPACE ELASTICITY ESTIMATES INTO TABLE
		
		* COMMERCIAL
		foreach var of varlist Commercial_30_OLS  Commercial_30_IV Commercial_20_OLS  Commercial_20_IV {
			replace `var' = LAMBDA_COM_M if Row == 5
			replace `var' = LAMBDA_COM_SD if Row == 6
			}
		* COMMERCIAL
		foreach var of varlist Residential_OLS  Residential_IV {
			replace `var' = LAMBDA_RES_M if Row == 5
			replace `var' = LAMBDA_RES_SD if Row == 6
			}
		* PARAMETER NAME
			replace  Parameter = "Lambda mean" if Row == 5	
			replace  Parameter = "Lambda s.d." if Row == 6		
	
	* POLISH PRESENTATION OF RESULTS (TWO-DIGIT PERCENTAGES)
		foreach var of varlist Commercial_30_OLS-Residential_IV {
		replace `var' = `var' * 100
			tostring `var', gen(_`var')  force format(%9.2f)
			replace _`var' = _`var'+"%"
			replace _`var' = "("+_`var'+")" if Row == 2 | Row == 4 | Row == 6 | Row == 8
			}
		keep Parameter _*

	* WRITE BOOTSTRAP VERSION OF TABLE 8	
		export excel using "TABS\TAB_8.xls", firstrow(variables) replace
		// NOTES: Only selected standard error estimates from this generated 
		// table are being used in the final paper - see Table notes in teh paper.
		
* END LOG SESSION
 log close	
